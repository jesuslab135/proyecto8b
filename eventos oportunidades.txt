// db/eventosSchema.ts
import { pgTable, varchar, integer, timestamp, text } from 'drizzle-orm/pg-core';
import { universidadesTable } from './universidadesSchema';
import { usuariosTable } from './usuariosSchema';
import { eventTypesTable } from './eventTypesSchema';
import { systemStatesTable } from './systemStatesSchema';
import { z } from 'zod';

export const eventosTable = pgTable('eventos', {
  id: integer().primaryKey().notNull(),
  titulo: varchar({ length: 200 }).notNull(),
  descripcion: text().notNull(),

  // Obsoleto en base de datos, usado temporalmente por el backend
  tipo: varchar({ length: 100 }).notNull(),

  creador_id: integer().references(() => usuariosTable.id).notNull(), // FK a usuarios
  universidad_id: integer().references(() => universidadesTable.id).notNull(), // FK a universidades

  fecha_inicio: timestamp().notNull(),
  fecha_fin: timestamp().notNull(),

  enlace_acceso: varchar({ length: 255 }),
  creado_en: timestamp().defaultNow(),

  event_type_id: integer().references(() => eventTypesTable.id), // FK a event_types
  state_id: integer().references(() => systemStatesTable.id),    // FK a system_states

  ubicacion: text(),
  capacidad_maxima: integer(),
  updated_at: timestamp(),
});

export const insertEventoSchema = z.object({
  titulo: z.string().max(200),
  descripcion: z.string(),
  tipo: z.string().max(100), // para compatibilidad temporal
  creador_id: z.number().int(),
  universidad_id: z.number().int(),
  fecha_inicio: z.string().refine(val => !isNaN(Date.parse(val))).transform(val => new Date(val)),
  fecha_fin: z.string().refine(val => !isNaN(Date.parse(val))).transform(val => new Date(val)),
  enlace_acceso: z.string().max(255).optional(),
  event_type_id: z.number().int().optional(),
  state_id: z.number().int().optional(),
  ubicacion: z.string().optional(),
  capacidad_maxima: z.number().int().optional(),
});

export const updateEventoSchema = z.object({
  titulo: z.string().max(200).optional(),
  descripcion: z.string().optional(),
  tipo: z.string().max(100).optional(), // para compatibilidad temporal
  creador_id: z.number().int().optional(),
  universidad_id: z.number().int().optional(),
  fecha_inicio: z.string().refine(val => !isNaN(Date.parse(val))).transform(val => new Date(val)).optional(),
  fecha_fin: z.string().refine(val => !isNaN(Date.parse(val))).transform(val => new Date(val)).optional(),
  enlace_acceso: z.string().max(255).optional(),
  event_type_id: z.number().int().optional(),
  state_id: z.number().int().optional(),
  ubicacion: z.string().optional(),
  capacidad_maxima: z.number().int().optional(),
}).partial();

// db/oportunidadesSchema.ts
import { pgTable, varchar, text, integer, date, timestamp, doublePrecision } from 'drizzle-orm/pg-core';
import { universidadesTable } from './universidadesSchema';
import { usuariosTable } from './usuariosSchema';
import { opportunityTypesTable } from './opportunityTypesSchema';
import { systemStatesTable } from './systemStatesSchema';
import { workModalitiesTable } from './workModalitiesSchema';
import { z } from 'zod';

export const oportunidadesTable = pgTable('oportunidades', {
  id: integer().primaryKey().notNull(),
  titulo: varchar({ length: 200 }),
  descripcion: text(),

  // Obsoleto en BD, usado temporalmente por el backend
  tipo: varchar({ length: 100 }),

  universidad_id: integer().references(() => universidadesTable.id),
  fecha_limite: date(),

  opportunity_type_id: integer().references(() => opportunityTypesTable.id), // FK a opportunity_types
  state_id: integer().references(() => systemStatesTable.id),                // FK a system_states
  created_by: integer().references(() => usuariosTable.id),                  // FK a usuarios

  empresa: varchar({ length: 150 }),
  salario_min: doublePrecision(),
  salario_max: doublePrecision(),
  modality_id: integer().references(() => workModalitiesTable.id),           // FK a work_modalities

  requisitos: text(),
  beneficios: text(),

  created_at: timestamp().defaultNow(),
  updated_at: timestamp(),
});

export const insertOportunidadSchema = z.object({
  titulo: z.string().max(200),
  descripcion: z.string(),
  tipo: z.string().max(100), // para compatibilidad temporal
  universidad_id: z.number().int(),
  fecha_limite: z.string().refine(val => !isNaN(Date.parse(val))).transform(val => new Date(val)),

  opportunity_type_id: z.number().int().optional(),
  state_id: z.number().int().optional(),
  created_by: z.number().int().optional(),
  empresa: z.string().max(150).optional(),
  salario_min: z.number().optional(),
  salario_max: z.number().optional(),
  modality_id: z.number().int().optional(),
  requisitos: z.string().optional(),
  beneficios: z.string().optional(),
});

export const updateOportunidadSchema = z.object({
  titulo: z.string().max(200).optional(),
  descripcion: z.string().optional(),
  tipo: z.string().max(100).optional(), // para compatibilidad temporal
  universidad_id: z.number().int().optional(),
  fecha_limite: z.string().refine(val => !isNaN(Date.parse(val))).transform(val => new Date(val)).optional(),

  opportunity_type_id: z.number().int().optional(),
  state_id: z.number().int().optional(),
  created_by: z.number().int().optional(),
  empresa: z.string().max(150).optional(),
  salario_min: z.number().optional(),
  salario_max: z.number().optional(),
  modality_id: z.number().int().optional(),
  requisitos: z.string().optional(),
  beneficios: z.string().optional(),
}).partial();

// src/routes/eventosController.ts
import { Request, Response } from 'express';
import { db } from '../../db/index';
import { eventosTable } from '../../db/eventosSchema';
import { eq } from 'drizzle-orm';

/**
 * @swagger
 * /eventos:
 *   post:
 *     summary: Crear un nuevo evento
 *     tags: [eventos]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - titulo
 *               - descripcion
 *               - tipo
 *               - creador_id
 *               - universidad_id
 *               - fecha_inicio
 *               - fecha_fin
 *             properties:
 *               titulo:
 *                 type: string
 *               descripcion:
 *                 type: string
 *               tipo:
 *                 type: string
 *               creador_id:
 *                 type: integer
 *               universidad_id:
 *                 type: integer
 *               fecha_inicio:
 *                 type: string
 *                 format: date-time
 *               fecha_fin:
 *                 type: string
 *                 format: date-time
 *               enlace_acceso:
 *                 type: string
 *                 nullable: true
 *     responses:
 *       201:
 *         description: Evento creado exitosamente
 *       500:
 *         description: Error al crear el evento
 */
export async function createEvento(req: Request, res: Response) {
  try {
    const { id, ...data } = req.cleanBody;
    data.fecha_inicio = new Date(data.fecha_inicio);
    data.fecha_fin = new Date(data.fecha_fin);

    const [nuevoEvento] = await db.insert(eventosTable).values(data).returning();
    res.status(201).json(nuevoEvento);
  } catch (e) {
    console.error('‚ùå Error en createEvento:', e);
    res.status(500).json({ error: 'Error al crear el evento' });
  }
}

/**
 * @swagger
 * /eventos:
 *   get:
 *     summary: Obtener todos los eventos
 *     tags: [eventos]
 *     responses:
 *       200:
 *         description: Lista de eventos
 *       500:
 *         description: Error al obtener los eventos
 */
export async function listEventos(_req: Request, res: Response) {
  try {
    const eventos = await db.select().from(eventosTable);
    res.status(200).json(eventos);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Error al obtener los eventos' });
  }
}

/**
 * @swagger
 * /eventos/{id}:
 *   get:
 *     summary: Obtener un evento por ID
 *     tags: [eventos]
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID del evento
 *     responses:
 *       200:
 *         description: Evento encontrado
 *       404:
 *         description: Evento no encontrado
 *       500:
 *         description: Error al obtener el evento
 */
export async function getEvento(req: Request, res: Response) {
  try {
    const id = parseInt(req.params.id);
    const [evento] = await db
      .select()
      .from(eventosTable)
      .where(eq(eventosTable.id, id));

    if (!evento) {
      res.status(404).json({ error: 'Evento no encontrado' });
    } else {
      res.status(200).json(evento);
    }
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Error al obtener el evento' });
  }
}

/**
 * @swagger
 * /eventos/{id}:
 *   put:
 *     summary: Actualizar un evento por ID
 *     tags: [eventos]
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID del evento
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               titulo:
 *                 type: string
 *               descripcion:
 *                 type: string
 *               tipo:
 *                 type: string
 *               creador_id:
 *                 type: integer
 *               universidad_id:
 *                 type: integer
 *               fecha_inicio:
 *                 type: string
 *                 format: date-time
 *               fecha_fin:
 *                 type: string
 *                 format: date-time
 *               enlace_acceso:
 *                 type: string
 *                 nullable: true
 *     responses:
 *       200:
 *         description: Evento actualizado correctamente
 *       404:
 *         description: Evento no encontrado
 *       500:
 *         description: Error al actualizar el evento
 */
export async function updateEvento(req: Request, res: Response) {
  try {
    const id = parseInt(req.params.id);
    const data = req.cleanBody;

    if (data.fecha_inicio) data.fecha_inicio = new Date(data.fecha_inicio);
    if (data.fecha_fin) data.fecha_fin = new Date(data.fecha_fin);

    const [actualizado] = await db
      .update(eventosTable)
      .set(data)
      .where(eq(eventosTable.id, id))
      .returning();

    if (!actualizado) {
      res.status(404).json({ error: 'Evento no encontrado' });
    } else {
      res.status(200).json(actualizado);
    }
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Error al actualizar el evento' });
  }
}

/**
 * @swagger
 * /eventos/{id}:
 *   delete:
 *     summary: Eliminar un evento por ID
 *     tags: [eventos]
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID del evento a eliminar
 *     responses:
 *       200:
 *         description: Evento eliminado correctamente
 *       404:
 *         description: Evento no encontrado
 *       500:
 *         description: Error al eliminar el evento
 */
export async function deleteEvento(req: Request, res: Response) {
  try {
    const id = parseInt(req.params.id);
    const [eliminado] = await db
      .delete(eventosTable)
      .where(eq(eventosTable.id, id))
      .returning();

    if (!eliminado) {
      res.status(404).json({ error: 'Evento no encontrado' });
    } else {
      res.status(200).json({ message: 'Evento eliminado correctamente' });
    }
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Error al eliminar el evento' });
  }
}

// src/routes/oportunidadesController.ts
import { Request, Response } from 'express';
import { db } from '../../db/index';
import { oportunidadesTable } from '../../db/oportunidadesSchema';
import { eq } from 'drizzle-orm';

/**
 * @swagger
 * /oportunidades:
 *   post:
 *     summary: Crear una nueva oportunidad
 *     tags: [oportunidades]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - titulo
 *               - descripcion
 *               - tipo
 *               - universidad_id
 *             properties:
 *               titulo:
 *                 type: string
 *               descripcion:
 *                 type: string
 *               tipo:
 *                 type: string
 *               universidad_id:
 *                 type: integer
 *               fecha_limite:
 *                 type: string
 *                 format: date
 *     responses:
 *       201:
 *         description: Oportunidad creada exitosamente
 *       500:
 *         description: Error al crear la oportunidad
 */
export async function createOportunidad(req: Request, res: Response) {
  try {
    const data = req.cleanBody;
    const [nueva] = await db.insert(oportunidadesTable).values(data).returning();
    res.status(201).json(nueva);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Error al crear la oportunidad' });
  }
}

/**
 * @swagger
 * /oportunidades:
 *   get:
 *     summary: Obtener todas las oportunidades
 *     tags: [oportunidades]
 *     responses:
 *       200:
 *         description: Lista de oportunidades
 *       500:
 *         description: Error al obtener las oportunidades
 */
export async function listOportunidades(_req: Request, res: Response) {
  try {
    const oportunidades = await db.select().from(oportunidadesTable);
    res.status(200).json(oportunidades);
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Error al obtener las oportunidades' });
  }
}

/**
 * @swagger
 * /oportunidades/{id}:
 *   get:
 *     summary: Obtener una oportunidad por ID
 *     tags: [oportunidades]
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID de la oportunidad
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Oportunidad encontrada
 *       404:
 *         description: Oportunidad no encontrada
 *       500:
 *         description: Error al obtener la oportunidad
 */
export async function getOportunidad(req: Request, res: Response) {
  try {
    const id = parseInt(req.params.id);
    const [oportunidad] = await db
      .select()
      .from(oportunidadesTable)
      .where(eq(oportunidadesTable.id, id));

    if (!oportunidad) {
      res.status(404).json({ error: 'Oportunidad no encontrada' });
    } else {
      res.status(200).json(oportunidad);
    }
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Error al obtener la oportunidad' });
  }
}

/**
 * @swagger
 * /oportunidades/{id}:
 *   put:
 *     summary: Actualizar una oportunidad por ID
 *     tags: [oportunidades]
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID de la oportunidad
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               titulo:
 *                 type: string
 *               descripcion:
 *                 type: string
 *               tipo:
 *                 type: string
 *               universidad_id:
 *                 type: integer
 *               fecha_limite:
 *                 type: string
 *                 format: date
 *     responses:
 *       200:
 *         description: Oportunidad actualizada correctamente
 *       404:
 *         description: Oportunidad no encontrada
 *       500:
 *         description: Error al actualizar la oportunidad
 */
export async function updateOportunidad(req: Request, res: Response) {
  try {
    const id = parseInt(req.params.id);
    const [actualizada] = await db
      .update(oportunidadesTable)
      .set(req.cleanBody)
      .where(eq(oportunidadesTable.id, id))
      .returning();

    if (!actualizada) {
      res.status(404).json({ error: 'Oportunidad no encontrada' });
    } else {
      res.status(200).json(actualizada);
    }
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Error al actualizar la oportunidad' });
  }
}

/**
 * @swagger
 * /oportunidades/{id}:
 *   delete:
 *     summary: Eliminar una oportunidad por ID
 *     tags: [oportunidades]
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID de la oportunidad
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Oportunidad eliminada correctamente
 *       404:
 *         description: Oportunidad no encontrada
 *       500:
 *         description: Error al eliminar la oportunidad
 */
export async function deleteOportunidad(req: Request, res: Response) {
  try {
    const id = parseInt(req.params.id);
    const [eliminada] = await db
      .delete(oportunidadesTable)
      .where(eq(oportunidadesTable.id, id))
      .returning();

    if (!eliminada) {
      res.status(404).json({ error: 'Oportunidad no encontrada' });
    } else {
      res.status(200).json({ message: 'Oportunidad eliminada correctamente' });
    }
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Error al eliminar la oportunidad' });
  }
}

